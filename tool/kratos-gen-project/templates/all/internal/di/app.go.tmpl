package di

import (
	"context"
	"time"

	"{{.ModPrefix}}{{.Name}}/internal/service"
	"github.com/djienet/kratos/pkg/conf/env"
	"github.com/djienet/kratos/pkg/log"
	bm "github.com/djienet/kratos/pkg/net/http/blademaster"
	"github.com/djienet/kratos/pkg/naming"
	"github.com/djienet/kratos/pkg/naming/discovery"
	"github.com/djienet/kratos/pkg/net/rpc/warden"
)

//go:generate kratos tool wire
type App struct {
	svc *service.Service
	http *bm.Engine
	grpc *warden.Server
}

func NewApp(svc *service.Service, h *bm.Engine, g *warden.Server) (app *App, closeFunc func(), err error){
	app = &App{
		svc: svc,
		http: h,
		grpc: g,
	}
	regCancel, err := app.registerSelf()
	if err != nil {
		log.Error("register discovery error(%v)", err)
	}

	closeFunc = func() {
		ctx, cancel := context.WithTimeout(context.Background(), 35*time.Second)
		if regCancel != nil {
			regCancel()
		}

		if err := g.Shutdown(ctx); err != nil {
			log.Error("grpcSrv.Shutdown error(%v)", err)
		}
		if err := h.Shutdown(ctx); err != nil {
			log.Error("httpSrv.Shutdown error(%v)", err)
		}
		cancel()
	}
	return
}

func (app *App) registerSelf() (cancel context.CancelFunc, err error) {
	if env.DiscoveryNodes == "" {
		log.Info(`discovery not be enabled. params "-discovery.nodes" or env(DISCOVERY_NODES) not set.`)
		return
	}

	dis := discovery.New(nil)
	inst := &naming.Instance{
		Zone:     env.Zone,
		Env:      env.DeployEnv,
		AppID:    env.AppID,
		Hostname: env.Hostname,
		Addrs: []string{
			"http://" + app.http.Server().Addr, 
			"grpc://" + app.grpc.Addr(),
		},
	}
	cancel, err = dis.Register(context.Background(), inst)
	return
}